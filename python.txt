
D:\tools\Python\Python36\Scripts\;D:\tools\Python\Python36\;
在.py文件开头写上 #!/usr/bin/python ,指明python运行路径
(whereis python 查找路径)

python是一种解释型语言，程序无需编译成二进制代码，而是在执行时对每一天语句进行编译
c#,java为编译型语言，需要预编译成dll,jar文件

max -- 获取字符串最大字符
max('abcd')   --- print 'd'
min -- 获取最小的 

字符串代码转换函数：
ord(str) 返回一个字符串的ASCII 的值
chr(i) 返回i这个值对应的字符

hex(i)  ---输出16进制字符串
hex(10) -- output '0xa'

oct(i)  ---输出8进制字符串
bin(i) ----输出2进制字符串


int(x, base=2/8/16) ----整形转换成2/8/16/进制
int('0xa', base=16)  output: 10


s.lower()   ---- 转换成小写字母
s.upper()  -----转换成大写字母
s.title()  ----- 将字符串首字母转换成大写
s.isdigit() ----判断字符串是否为数字
s.isalpha()  -----判断字符串是否是英文字符
s.islower()/isupper()
s.strip()  ----返回去掉左右空白字符的字符串
s.lstrip() ----返回去掉左边空白字符的字符串  
s.rstrip() ----返回去掉右边空白字符的字符串 
s.count(sub [ ,start[,end]])---返回一个字符串子串的个数  ("ab bc abcd").count("bc") //2
s.find(sub [ ,start[,end])   ---获取一个字符串sub的索引(位置)，失败返回-1
	"ab ac abc".find("ab") //return 0; "ab ac abc".find("ab",1) //return 6
	"ab ac abc".find("ab",4) //return 6
	"ab ac abc".find("ab",4,9) //(index 4-8) return 6
s.replace(old, new[,count]) ---用新字符串替换旧字符串
"ab ac abc".replace("ab","AB")

help(str)/help("__main__")

s.center  ----将字符串按照字符居中显示,默认空格填充
	"abc".center(10,'#') 
x=10
print(str(x).center(10),end='')

字符串的格式表达式
运算符： %
语法："abc%d" %age

%s ---字符串占位符
%r --- 字符串repr(而是不是str)
%d --- 十进制整数 
%o ---八进制整数
%x ---十六进制整数(字符a-f)
%X ---十六进制整数(字符A-F)
%e --- 指数型浮点数，如2.9e+8
%E ---指数型浮点数，如2.9E+8
%f,%F ---浮点数十进制形式
%% --- 相当于一个%

"%(name)s, age= %(age)d" %{"age":10,"name":"bula"}
占位符和类型码之间的格式语法
- 号左对齐
+ 号右对齐
0 补零
width 宽度
pricision 精度(用于%f中)
例子： "%10d" %123
	"%-10d" %123
	"%010d" %123  (在123前面补齐10个字符的0)
	"%7.2f" %1.23456789  (7:宽度，.2表示精度)


range(stop)
从零开始，每次生成一个整数，

练习：算出100-1000之间的水仙花数(Narcissistic number
水仙花是指百位的立方 + 十位的立方 + 各位的立方 = 原数的数字
153 = 1**3 +5**3 + 3**3

narci = range(100,1001,1)
for x in narci:
	hud = x//100   #153 // 100 =1
	hudYu= x %100  # 153 % 100 = 53
	hudYu //10
打印九九乘法表

打印前十个斐波那契数
1 1 2 3 5 8 13 21 



**********************************************
列表运算
* 运算符用于生成重复的列表
x=[1,2] *3 # x= [1,2,1,2,1,2]

列表的比较运算
> >= < <= == !=

列表的 in, not in
1 in [1,2,3] # true

l = [2,3,4]
l[0:1]=[1.1,4.1] # l = [1.1,4.1,2,3,4]
l[1:1]=[2.1,2.2] # l = [2,2.1,2.2,3,4]
切片赋值是改变原来列表相应位置的值，不会生成新的列表

常用的列表函数
len(x) 求列表的长度
max(x) 返回序列的最大值元素
min(x) 返回列表的最小值
any(x) 真值测试，如果列表中的一个值为真，则返回true
all(x) 真值测试，如果列表中所有值都为真，则返回true

any example:
any([0,False,None,'',[]]) # False
any([0,False,None,'a',[]]) # True
l3=[None]*3
any(l3)  # False
any(b'\0') #False

list index 方法:
l.index(v[,begin[,end]]) ---返回对应元素的索引下表，begin为开始位置，end结束位置
l,extend(lst)  ---向列表尾部追加一个列表
l.clear()  ---列表清空
l.sort(reverse=False)  ---排序
l.reverse()   ---反向排序

例： l =[1,2,3,4,3,6,5,3,4,7]
l.index(3,4) # result 4
l.index(3) # result 2
l.index(3,4,8)
l.sort(reverse=True)  #倒叙排序，default reverse = true

浅拷贝 
l.copy()
l[:] #切片进行浅拷贝

L=[20,21,22]
L1 = [10,L,30]  # [10,[20,21,22],30]
L2 = L1.copy() # [10,[20,21,22],30]
L[2]=25
L1 # [10,[20,21,22],30]

深度copy, 拷贝后创建了一个新的对象引用，使原来对象不再影响现在对象。
import copy
L=[20,21,22]
L1 = [10,L,30]
L2 = copy.deepcopy(L1)
L[2] = 25

**************列表表达式:******************
语法: [表达式 for 变量 in 可迭代对象]
或者
[表达式 for 变量 in 可迭代对象 if 条件表达式]
例如1: 需要生成 [1,4,9,16 ...] list
L = [x**2 for x in range(1,11)]
或者L = [x**2 for x in range(1,11) if x%2==0]

sequence = [12, 34, 34, 23, 45, 76, 89]
for i, j in enumerate(sequence):print(x,j) #打印出带index的列表

例如2：将列表[2,3,5]中的元素与列表[7,11,13]的元素分别相乘，将得到的元素放于一个列表中。
L = [x*y for x in [2,3,5] for y in [7,11,13]]

练习1:生成前40个斐波那契数，保存在列表中，打印出来
1 1 2 3 5 8 。。。。

练习2:完全数:
完全数指除自身以外的所有的因数相加之和等于自身的数
1+2+3=6
求4-5个完全数并打印
l = [x for x in range(1,7) if 6%x ==0 and 6//x>1]

练习3：将 "hello"字符串转换成 "h-e-l-l-o"
s="hello"
l = list(s)
"-".join(l)
或者 
'-'.join(s) #原因字符串是可迭代的 

**********************元组*************************
元组是不可变的序列，可以存放任意值
t=()
t=tuple()  / t = tuple(iterable) 

创建元组
t=(20,)
t = 20, 
t='hello',
t = 1,2,3 # (1,2,3)
t= (1,2) *3  #生成重复的元组

错误的创建方法：
t=(20) # type(t) = int

序列赋值：
x, y = 100, 200 # x =100,y=200
x, y = (100,200) #x=100, y=200
x, y =[100,200] #x=100,y=200

reversed() #反向迭代器
s = "abc"
reversed(s)
练习1：
输入任意一个字符串，判断是否为回文， 12321则是回文

练习2：编写一个数值，计算并打印其中每一个数字出现的个数，
如： 输入2234523
打印: 2出现3次，3出现1次 ....



********************字典***************************
d={}
d=dict()
d=dict(iterable)用可迭代对象初始化字典
dict([("a",1),('b',2)])

不可变类型:
bool, int, float, complex,str,tuple,frozenset,None

字典成员资格判断 in/not in运算符
可以用in/not in判断一个键是否在字典中，如果存在则返回true,否则返回false

d.clear(), 字典清空
d.pop(key), 移除键，同时返回此键对应的值
d.copy(), 返回字典的副本，浅层拷贝
d.update(d2) ,将字典d2合并到d中，如果键相同，此键的值取d2的值作为新值
d.get(key,default)， 返回键key所对应的值，如果没有此键则返回default
d.values(), 返回可迭代的dict_values值对象
d.items(), 返回可迭代的dict_iterm 对象
d.keys(),返回所有的keys
for k,v in d.items(): print('key:',k,'-->',v)

字典的推导式
例： numbers=[1001,1002,1003,1004]
names=['Tom','Jerry','Spike','Tyke']
animals ={numbers[i]:names[i] for i in range(4) if numbers[i]%2==0]

练习:
已知两个等长列表list1和list2，以list1中的元素为键，以list2中的元素为值，生成相应字典,
如:list1=["a","b","c"], list2=[1,2,3]
生成的字典: {'a':1,'b':2,'c':3}
list3={list1[i]:list2[i] for i in range(len(list1))}

练习2,
输入5个学生的姓名和年龄，每个学生的信息生成字典后存入列表，内部存储格式如下:
[{"name":"aaa","age":20},{"name":"bbb","age":30}],存入完成后打印出来
+------------+-------------+
|   Name     |   Age	   |
+------------+-------------+
|   aaa      |    20       |
|   BBB      |    30       |


l.append({"name":"aaa","age":20})
l.append({"name":"bbb","age":30})


********************集合***************************
集合是可变的容器，可迭代
集合内的数据对象都是唯一的
集合是无序的存储结构，集合中的数据没有先后关系
集合是相当于只有键，没有值的字典
集合内的元素必须是不可变得对象

set()
set(iterable)

set({"name":'aaa',"age":20}) # {'name', 'age'}

集合的运算
交集，并集，补集，子集，超集
A={1,2,3}
B={2,3,4}
交集={2,3}
补集 A-B ={1}, B-A ={4}
子集 A={1,2},{1},{2},{2,3},{3},{1,2,3}

运算符 |, 生成两个集合的并集
A|B # {1,2,3,4}
A-B #补集 {1}
A&B #交集运算 {2,3}
A^B #对称补集 {1,4}

集合的常用方法
s.add(e)
s.clear()
s.difference(s2), #s-s2
s.difference_update(s2) # s,s2补集结果更新至s中
s.intersection(s2) #等同于s,s2的交集
s.intersection_update(s2) #s,s2 交集结果更新至s中
s.discard(e) #从集合s中移除一个指定元素，如果指定元素存在则删除该元素，否则不做任何改动
s.issubset(s2) #如果s与s2交集为非空，返回true,否则返回false
s.union(s2)  # 求s 和s2的并集 
s.update(s2)  #将s,s2的并集更新至s中

输入重定向:
命令 : < 输入文件
作用，将文件中的内容重定向为一个命令的输出，此时标准键盘输入可能无效


********************总结***************************
三种可变的数据类型
list
dict
set

固定集合 frozenset
创建一个不可变，无序的集合（唯一元素）,不可修改，没有修改方法
frozenset() #空固定集合 
frozenset(iterable) #
frozenset([1,2,3,5,8])

固定集合可以作为字典的键，还可以作为集合的值


********************函数***************************
函数参数传递方式：
1.位置传参
2. * 序列传参，例如(1,2,3),这是已元组的方式传递至方法中
3. **关键字传参, fn(a=1,b=2)
	指参数传递时按照形参的名称给形参赋值 
	实参合形参按名称进行匹配。例如(p1='abc',p2='def'...)

def add(p1,p2):
   print(p1+p2)

add(1,2) #ok
l=[1,2]
add(*l) #如果传递 add(l)则会将([1,2],)的元组传递个add函数中

3.1,字典关键字传参
   实参合形参通过字典进行传递和匹配，字典的值传递给键对应的形参
   字典传参的键名和形参名必须一致
   键名必须为字符串
   键名要在形参中存在

d={'a':10,'b':20,'c':30}
myfun(**d)

4.综合传参
例如: myfun(100,*(200,300))

5.缺省参数
def sum4(a,b,c=0,d=0):
缺省参数必须自右至左依次存在，如果一个参数有缺省值，则其右侧的所有参数都必须有缺省参数。
缺省参数可以有0个或多个，甚至全部都可以是缺省参数
def fn(a,b=10,c): #函数定义错误，因为缺省参数b后面的c必须也是缺省参数


6.函数的不定长参数：
  6.1，星号元组形参 ,比如默认函数 min/max,具体实例见star_args.py
  6.2，双星好字典形参, def myfun4(**args): #args 为字典类型

def fn(*params):  #(for p in params:)  type(params) == tuple
fn((1.1,2.2,))  #给函数传递一个元组，则len(params)=1

def myfun(a, b, *, c): #c为命名关键字形参,*代表空一位

def fn(**args):
	for k,v in args.items():print(k,v)
fn(name="aaa",age=18,d=True)



函数嵌套：指一个函数里用语句来创建其他函数的情况(函数体内定义函数)

函数变量：函数名是变量，他在创建函数的时候绑定一个函数
例如：def fn():print('aa')
f1=fn
f1()
help("__main__") ,可以看到有两个函数变量

函数作为函数的返回值
例如:
def getfn():
	def print_hello(): print("hello")
	return print_hello()
fn=getfn()
fn

练习:编写一个函数，带op参数，def get_operation(op):
此函数在传入字符串'Add',返回一个加操作的函数
def myadd(x,y): return:x+y
传入一个字符串'Multipy',返回乘操作的函数
def mymul(x,y):return x*y
在主函数中程序如下:
a =  int(input("the first num:"))
b =  int(input("the second num:"))
operation =  input('operation plz (Add/Multipy):')
fn = get_operation(operation)
print("result:",fn(a,b))


python全局变量和局部变量
  python四个作用域:
1.局部作用域(函数内) Local   L
2.外部嵌套函数作用域  Enclosing function locals   E
3.函数定义所在模块(文件)的作用域 Global(module)  G
4.python内置模块的作用域  Builtin(python)(如Max()函数)    B

变量名的查找规则
在访问变量时，先查找本地变量，然后是包裹此函数的外部函数的变量，
之后是全局变量，最后是内置变量
	L -- > E ---> G  --->B

v=100
def fn():
	print(v) #抛出错误，v没有申明
默认情况下，函数内的局部变量不能访问到全局变量。

global 语句
作用，告诉解释器，global语句申明的变量作用域为模块级的全局变量
v=100
def fn():
	global v
	v= 200
	print(v) #全局变量v被修改

nonlocal 语句
作用：告诉解释器，nonlocal声明的变量不是局部变量，也不是全局变量，
而是外部嵌套函数的变量
只能在被嵌套的函数(子函数)中使用

v = 100
def outter():
	v=200
	def inner():
		nonlocal v #外部嵌套函数变量
		v +=1

练习：
1.给出一个数n，写一个函数来计算1+2+3+....的和
print(mysum(100)) #5050
2.给出一个数n,写一个函数计算n!
n!=1*2*3*4****
print(myfac(5)) #120
3.给出一个数n，写一个函数计算1+2**2+3**3 +..的和
result = map((lambda x:pow(x,x)),range(1,10))
4.写一个函数打印出杨辉三角
     1
    1 1
   1 2 1
  1 3 3 1
 1 4 6 4 1

5.集合输入输出
模拟点名系统，已知全班名单，随机打印学生姓名进行点名，并得到此学生是否
已到，输入'y'代表已到，输入'n'代表没到，点名完成，打印未到者名单

6.假设有一个列表有很多数据，还有重复的，例如
l=[9,8,4,6,8,9,4,1,....]
打印出列表中的数据，要求重复的只打印一次，打印的顺序以列表中第一次
出现的顺序为准，
如上述列表打印出:  9 8 4 6 1 .....



*****************lambda**********************
创建一个匿名的函数对象
def myadd(x,y):return x+y
myadd =  lambda x,y :x+y
myadd(1,3)
print("100*200=",(lambda x,y:x*y)(100,200))

def operation(fn,x,y)：return fn(x,y)
operation((lambda a,b:a+b),100,200)

语法说明：
lambda只是一个表达式，用来创建一个函数对象
lambda表达式执行时，返回的是冒号(:)后表达式的值
lambda表达式创建的函数，只能包含一条语句,(冒号后面只能是一个表达式)
lambda可以随时创建和销毁，有利于减少程序的耦合度，且不占内存空间（当表达式执行后，立刻销毁）

练习：写一个lambda表达式求两个和多个变量的最大值

 (lambda *x:max(x))(3,5,7,9)


globals() / locals()函数
globals() 返回当前全局作用域内变量的字典
locals() 返回当前局部作用域内变量的字典


eval() /exec()函数
eval() ：把一个字符串当成一个表达式来执行，返回表达式执行后的结果
语法格式： evals(source,globals=None,local=None)
例如：
x,y = 100,200
a= eval("x+y") 
print(a) #300
local_scope={'x':5,'y':10}
a = eval('x+y',None,local_scope)
print(a) # 15



exec(): 把一个字符串当成程序来执行,这里的字符串可以很长
语法格式: exec(source,global=Non,locals=None)


例如:
x,y = 100,200
s= "print('hello:',x,y)"
exec(s)


闭包(closure)
将组成函数的语句和这些语句的执行环境打包在一起时，得到的对象称为闭包。

如果一个内嵌函数访问外部作用域的变量，则这个函数就是闭包
例:
def make_power(x):
	def fn(arg):return arg **x
	return fn
f = make_power(2)
y = f(100) #100 **2



函数式编程
指用一些列函数解决问题

函数的可重如性：指输入一定，则输出必定一定
def add2(x,y):return x+y

高阶函数
满足下列条件中的一个函数即为高阶函数
1.函数接受一个或多个函数作为参数传入
2.函数返回一个函数， #reutrn fn
python内置的高阶函数
map,filter,sorted

map 函数
map(func,*iterable)，用函数和可迭代对象中的每一个元素作为参数计算出新的可迭代对象，
当最短的一个可迭代对象完成迭代后，此迭代结束
def pow2(x):return x**2
mix = map(pow,range(1,10)) #返回map可迭代对象
for x in mix:print(x)

练习:生成一个迭代器，1*4,2*3,3*2,4*1  #[1,2,3,4]
生成第二个迭代器：1*2,1*3,1*4,2*3,2*4...



filter 函数
filter(function/None,iteratble)
筛选序列中的数据，返回一个可迭代对象，此可迭代对象将对iterable进行筛选
function将对iterable中的每一个元素进行求值，返回False则将此数据丢弃，返回True,则保留

l = [x for x in filter(lambda x:x%2==1,range(10))] #[1,3,5,7,9]

sorted函数
将原来可迭代对象的数据进行排序，生成排序后的列表
sorted(iteratble, key=None,reverse=False)
key用来提供一个值，这个值作为排序的依据,可以是一个函数的引用
(冒号排序和快速排序)
l=[5,-2,-4,0,3,1] #采用绝对值进行排序
l2=sorted(l,key=abs)
name=['Tom','Jerry','Spike','Tyke'] #根据名字长短排序
def sortname(arg):
    return len(arg) #必须返回值，sorted根据返回值进行排序，不一定是整形返回值
def sortname2(arg):#根据名字首字母顺序排序
    return arg[0] 
l2 = sorted(name,key=sortname)

传入字典,也是可以进行
names=[{'id':3,'name':'Tom'},{'id':2,'name':'Jerry'},{'id':5,'name':'Spike'},{'id':1,'name':'Tyke'}]


递归函数(recursion)
函数直接或间接的调用自身
def f():
	print('hello')
	fn()
fn()
递归最大层数是1000，可以修改，当达到最大递归层数则会抛出错误,递归终止
几乎所有的递归都可以用while循环来代替
优点：可以把问题简化，让思路更清晰
缺点:递归因系统环境影响大，当递归深度太大时，可能会得到不可预知的结果

练习
1.用filter函数将1-100之间所有的素数prime放入列表中
2.用递归方式计算1+2+3...n的和
3.用函数式编程，计算出1-20阶乘的和
1!+2!+3!....20!

装饰器(decorator )
装饰器是一个函数，用来包装另一个函数或类，目的是在不改变原函数名的情况下，改变被包装函数(对象)的行为

def deco(fn):
	print('this is decorator function,return fn')
	return fn
语法：
@装饰器函数名称[(装饰器函数传参)]
def 函数名(参数): #被装饰函数
	pass

函数文档字符串
def fn():
    "函数文档描述" #在函数第一个字符串，可以是多行
print(fn.__doc__)
help(fn)


函数的属性
1. __name__: 用来标记函数名

以下划线开头，以双下划线结束的标识符通常代表python的特殊属性

模块 Module
模块是一个包含有一系列变量，函数等组成的程序组
模块是一个文件，模块文件名通常以.py结尾

分类：
1.内置模块，在解析器的内部可以直接使用, time, sys， 一般用c语言写的
2.安装的标准库模块，安装python时已经安装，可以直接使用，例如os模块,python解析器下在os.py中 (>>>math 可以得出路径)
3.第三方模块，通常开源，需要自己安装
4.用户自己编写的模块

dir(object) 函数，可以查看模块的所有属性
help(object)函数，可以查看模块相关的文档字符串
help(math.isnan) #例如

from import,将模块内的一个或多个属性(变量，函数等)导入到当前模块
from 模块名 import 模块属性
from math import sqrt
from bs4 import BeautifulSoup

from 模块名 import * #导入模块下面所有的属性
http://docs.python.org


内置模块 time
import time
公元纪年是公元0000年1月1日开始
计算机元年是从1970-1-1 零时开始，此时间为0
UTC时间,又叫通用坐标时间(Coordinated Universal Time)是从格林尼治时间开始计算
  UTC时间与中国(东八区)相差8个小时
  UTC时间不会因时区问题产生错误
DST阳光节约时间(Daylight Saving Time),又称夏令时，是经过日照时间修正后的时间

时间元组， 是9个整数组成的，这9个元素从前自后顺序为：
四位的年(1993)
月(1-12)
日(1-31)
时(0-23)
分(0-59)
秒(0-59)
星期几(0-6,周一是0)
元旦开始日(1-366)
夏令时修正时间(-1,0,1)
注：如果年份小于100，则会自动转换为加上1900后的值
time.timezone 本地区时间与UTC时间差(以秒为单位)
time.altzone  夏令时时间与UTC时间差(以秒为单位)
time.daylight 夏令时矫正时间
time.tzname	时区名称的元组

函数
time.time() 返回从计算机元年至当前时间的秒数(浮点数 UTC时间为准)
time.gmtime([secs]) 将给定的秒数转换为UTC表达的时间元组
time.mktime(tuple) 将时间元组转换为新纪元秒数时间(UTC为准)
time.asctime([tuple]) 将时间元组转换为字符串

练习:
写一个程序，输入出生日期，计算已经出生了多少天


数学模块
math.degrees(x)  将弧度x转换为角度
math.radians(x)  将角度x转换为弧度

练习：
1.输入圆的半径r和圆的角度d,算出圆的扇形面积
d*pi*pow(r,2)/360

2.打印出点子时钟，格式为HH:MM:SS,每隔一秒打印一次

3.编写一个闹钟，启动时设置定时时间，到时间后打印一句话，然后退出程序

***************系统模块sys*************
系统模块与系统相关的信息
sys.path 模块搜索路径,path[0] 是当前脚本程序的路径名，或者是''
sys.modules  已加载模块的字典
sys.version  版本信息
sys.version_info  版本信息的命名元组
sys.argv   命令行参数，argv[0]代表当前脚本程序路径名
sys.copyright  获得python版权相关的信息

sys.exit([code]) 退出程序，正常退出时sys.exit(0),异常退出可以是sys.exit(-1)
sys.getrecursionlimit()  得到递归的层次,默认为1000层
sys.setrecursionlimit(n) 设置递归的最大层次
sys.platform 获取平台，windows中为 win32

自定义模块
自定义模块搜索路径：
import 模块名 #对应模块名.py 在哪里可以找到
查找顺序:
1.搜索内置模块
   sys.buildins_modules_name
2.sys.path 提供的路径,
   可以将模块.py文件路径加入到sys.path中， sys.path.append("/home/execise") import 模块
   环境变量的值会在python解析器启动时自动加载到sys.path列表中
3.搜索程序运行时的路径，默认当前路径


printenv 在linux中打开环境变量
echo $PATH

追加环境变量：
export PATH=$PATH:/home/usr/execise
echo $PATH

PYTHONPATH环境变量
此环境变量的值会在python的解析器启动时自动加载到sys.path列表中
export PYTHONPATH=$PYTHONPATH:/home/usr/execise
1）在系统的环境变量中设置的PYTHONPATH，是永久的。
2）命令行中设置的PYTHONPATH，在命令行窗口关闭后，就是失效了。

linux 用printenv 可以查看系统中所有的环境变量

模块的加载过程
1.在模块导入时，模块内所有语句会执行(只执行一次)
2.如果一个模块已经导入，再次导入时，不会重新执行所有语句


模块的属性：
__name__属性 用来记录模块自身的名字
1.对于被导入的模块，模块名去掉路径前缀和.py后缀的 文件文字，必须 mymodule.py的文件，则模块名mymodule

2.对于被执行的主模块，模块名为'__main__',(在模块中/.py 打印__name__,在外面使用 python mymodule.py 调用模块，则打印出__main__)

3.当将模块路径加入到系统变量中，使用 import mymodule， 则打印出模块名字 mymodule

主模块：是指直接运行模块,比如 python mymodule.py
非主模块： 是指导入的方式运行模块, import mymodule

__all__属性
当用from import * 语句导入模块时，只导入__all__列表内的变量(属性)
__all__属性是用来存放可导出属性的列表
指定哪些变量和属性要导入 ： __all__ = ["hello1","hello2","name1"]
module_all.py
def hello1():pass
def hello2():pass
def hello3():pass
name1="aaa"
name2="bbb"
from module_all import *  #这是只导入["hello1","hello2","name1"]  dir()查看所有模块名

__file__ 模块文件名路径
mymodule.__file__ 得到模块文件路径

模块的隐藏属性
模块中以 '_' 或者 '__' 开头,不以'__' 结尾的属性，在用from import * 导入模块时，将不会导入到模块中
__myname ='aaa'


随机模块 random
import random as r
r.random() 返回一个(0,1]之间的随机数
r.getrandbits(nbit)以长整形的形式返回用nbit位来表示的随机数
例如:r.getrandbits(8), 返回0-255（2的8次方减1）的整数


r.uniform(a,b) 返回[a,b]区间的随机数
例如: r.uniform(5,10), 生成5-10之间的float随机数

r.randrange([start,] stop[,step]) 返回range(start,stop,setp中的随机数)
例如:.randrange(3,15,2), 从3-15之间抽取随机数，步长为2

r.choice(seq) 从序列中抽取随机元素返回

r.shuffle(seq) 随机指定序列的顺序(乱序序列)，洗牌
r.sample(seq,n) 从序列中选择n个随机且不重复的元素


练习:
猜数字游戏，随机生成一个0-100之间的整数，保存在变量x内，让用户输入一个数y,输出猜数的结果：
如果y等于x，提示“恭喜菜对了”，退出
如果y>x,提出“大了一点，继续猜”
如果y<x, 提示'小了一点,继续猜',知道猜对为止



*************包(模块包)package********
将模块以文件夹的形式组织形式进行分组管理的方法

包的加载
import 包名.模块名 as 模块别名
import 包名.模块名.函数名 as 函数别名
import 包名.子包名.模块名 as 模块别名

包内的__init__.py文件作用:
1.在包被加载时自动调用
2.在内部填写包的文档字符串
3.加载此包所依赖的一些模块或其他包

模块的加载过程
在python 导入包时会生成一个  __pycache__.py文件夹，里面包含了__init__cpython-36.pyc和__menu__cpython-36.pyc 16进制文件，
可以更快的被解释执行器执行
       编译                   解释执行过程
menu.py --> __menu__cpython-36.pyc --> python运行模块和方法(-36应该是python的版本)
只有在模块加载的过程中才会编译，方便更快的加载模块，python为


练习:
模拟斗地主发牌，共54张扑克
黑桃('\u2660'),梅花('\u2663'),方块('\u2665'),红桃('\u2666')
A2-10JQK 和大小王
三个人，每个人发17张牌，底牌留3张
输入回车，打印第1个人的17张牌
输入回车，打印第2个人的17张牌
输入回车，打印第3个人的17张牌
输入回车，打印三张底牌
print('\u2660')在linux环境下可以打印出黑桃图案


有5位朋友在一起，第5个朋友比第4位大2岁，
第4位朋友比第3位大2岁，
第3位朋友比第2位大2岁，
第2位朋友比第1位大2岁，
第1位朋友说他10岁，计算其他朋友个多少岁


*******PYTHONPATY环境变量和sys.path的关系**********
PYTHONPATH也是Python搜索路径，默认import的模块都会从PYTHONPATH里面寻找
python启动过程中会读取PYTHONPATH变量

sys.path为标准库模块执行路径，python默认会先找sys.path路径
sys.path.append('/home/usr/execise') 添加路径查找，缺点是将执行路径写入代码

在linux环境中运行 export PYTHONPATH=/home/usr/execise


如何在终端启动时自动设置pythonpath环境变量? 在linux 中
在~/.bashrc文件里加入下面一行:(.表示文件是隐藏文件)
export PYTHONPATH=$PYTHONPATH:/home/hur2/Desktop/execise


*************python调试器pdb模块*************
pdb是一个模块，可以import pdb，主要用于调试程序
作用：
1.让程序单步执行，并跟踪模块的执行流程
2.让运行查看变量的值
3.让程序控制程序的执行流程

方法:
import pdb
pdb.set_trace() 在此代码段进度调试
调试命令: 
q/quit: 退出pdb调试器
l/list: 列出源码
h/help:查看pdb帮助
p/pp [表达式] : 运行该表达式并返回结果
n/next :执行下一条语句
c/cont/contiune : 继续执行，知道下一个断点
b/break [断电位置] :设置断点
cl/clear [断点号] : 清楚断点
s/step : 进入到函数内部执行
r/return:继续运行，知道函数返回
w/where: 打印函数调用栈
run [命令行参数]  重新开始运行程序

pdb断点的设置方法：
1)文件名：行号
(Pdb) b test_pdb.py :19 #在text_pdb.py中第19行设置断电
2)当前文件的行号
(Pdb) b 20 #等同于 b text_pdb.py : 20
3)函数名
(Pdb) b f1 #在函数开始时设置断点
4)模块.函数名
(Pdb) b contra.play #在contra模块的play函数上设置断点


控制台下的pdb调试
控制台下运行pdb调试器的命令格式：
$python -m pdb xxx.py #进入pdb模式，而xxx.py文件就不用加入pdb.set_track()



**************异常处理********************
try/except/else/finally语句
语法:
try:
   可能触发的异常语句
except 错误类型1 [as 变量1]:
    异常处理语句
except 错误类型2 [as 变量2]:
    异常处理语句
except:
    异常处理other
else:
    未发生异常语句  #可以用来判断程序是否发生了异常,发生异常则不执行此语句，最多只有一条else语句
finally:
     最终语句


Python中的错误类型
ZeroDivisionError  除(或者取模)零错误
StopIteration  迭代器没有更多的值
OverflowError  数值运算超出最大限制
IOError  	输入、输出操作失败
ImportError	导入模块错误
GeneratorExit	生成器发生异常来通知退出
IndexError	序列中没有此索引
FloatingPointError	浮点计算错误
IndentationError	缩进错误
TypeError	对类型无效的操作
ValueError	传入无效的参数
AssertonError	断言语句失败
NameError	未声明/初始化对象
AttributeError	对象没有这个属性
KeyboardInterrupt 用户中断执行，通常是 Ctrl + c
更多参见: help(__builtins__)

raise 语句
生成一个错误，让程序进入异常状态
语法: 
raise [异常类型]
raise [异常对象]

with 语句
语法: with 表达式 [as 变量名]:语句块
说明 as 子句中的变量绑定生成的对象,即使语句块中出现异常，f也会自动关闭，目前只有文件才能用with管理
作用：使用于对资源进行访问的场合，确保使用过程中不管是否发生异常，都会执行必要的"清理"操作，并释放资源
with open("myfile.txt","r") as f: 
	print(f.readlines())
	

assert 语句
语法：
assert [真值表达式]，错误数据(通常是字符串)
当真值表达式为false时，用错误数据创建一个AssertionError类型的错误，抛出后进入异常状态
等同于:
if 真值表达式 == False
	raise AssertionError(错误数据)
例如:
assert s<=100, "error occured, the score can't be greater than 100"

*****************迭代器Iterator和生成器Generator****************
迭代器是指能用next(it)函数取值的对象或实例
说明:
用iter函数可返回一个可迭代对象的迭代器
迭代器是访问可迭代对象的一种方式
迭代器只能往前，不能后退
例如:
L = [1,1,2,6]
#next(L) #error occured, list is iterable but not an iter type
it = iter(L)
next(it) #1
next(it) # StopIteration exception when no more element

str 是可迭代对象， int 不是可迭代对象

迭代器协议:指对象/实例能够使用next函数获取下一项数据，在没有下以项目数据时触发一个StopIteration异常来终止迭代约定
next(it) --> __next__(self)方法
iter(obj) --> __iter__(self)
class Odd:
    def __init__(self,start,end):
        self.start=start
        self.end =end
        self.current =start
     def __next__(self):
        print("call next")
        if(self.current>self.end):
            raise StopIteration("stop iteration")
        r = self.current
        self.current=r+2
        return r
    def __iter__(self):
        print("iteration function calling")
        return self

o =Odd(1,10)
for x in o: print(x) # 1,3,5,7,9


生成器Generator(python 2.5及以后的版本才有)
生成器是能够提供迭代器的对象/实例


生成器函数：
含有yield语句的函数式生成器函数
yield翻译为生成或者产生

yield 语句
语法:
yield [表达式]
说明：
yield用于def函数中，目的是将此函数作为生成器函数使用
yield 用来生成数据，供迭代器next(it)函数使用

说明:
生成器函数的调用将返回一个生成器对象，生成器对象是可迭代对象
在生成器函数内调用return会产生一个StopIteration异常

练习：
写一个生成器函数myodd(x),传入一个终止值，可生成一个生成1,3,5,7,...x奇数的生成器
用for 语句打印出这些奇数
def myodd(x):
    mylist = range(1,x+1,2)
    for x in mylist:
        yield x

生成器表达式：
语法：
(表达式 for 变量 in 可迭代对象 [if 真值表达式])

例如:
g = (x for x in range(10) if x%2==1 ) #返回一个生成器对象,占用内存少
g = [x for x in range(10) if x%2==1 ] #返回一个列表
python 3.0 唯一一个生成器函数 range()
for i,x in enumerate(range(10000)):print(i,x)  #推荐此种方法遍历
l =[x for x in range(10000)]
for i,x in enumerate(l):print(i,x) #不推荐此种方法，耗内存,先产生大数据量列表了

迭代工具函数：
用于生成一个个性化的可迭代对象
zip(iter1[,iter2[...]]) 返回一个zip对象，此对象用于生成一个元组，此元组的个数由最小的可迭代对象决定

enumerate(iteratble[,stat]) 生成带索引的迭代器，返回的迭代类型为索引-值对(index,value)的元组对,默认索引从零开始，也可以用start指定

例如:
numbers=[10086,10000,10010,95588]
names = ["移动","电信","联通"]
zip_obj = zip(numbers,names)
for no, name in zip_obj:
	print(name," Number:",no)

d = dict(zip(numbers,names)) #生成字典


****************文件**********************
linux/unix下文件可分为普通文件和设备文件
普通文件是由文件名和文件中的数据两个部分组成
设备文件放在dev(device)文件夹下面 
	cdrom(光驱),stdin(标准输入，键盘),stdout(标准输出)，stderror
文件的打开和关闭
文件需要在使用时先打开才能读写
在不需要读写文件时，应及时关闭文件以释放系统资源
任何操作系统打开文件数都是有最大限制,默认liunx系统同一个程序打开最大文件为1023个

打开文件函数:
	f= open(file,mode='r')
f.readline()
f.readlines(n) 返回每行字符串的列表，n代表最大字符数(字节数)
f.writelines(lines) 写入字符中的列表
f.flush() 把写入文件对象的缓存内容写入到磁盘

模式字符串的含义：
'r' --以只读方式打开，默认
'w' --以只写方式打开，删除原来内容，如果文件不存在则创建文件并以只写的方式打开
'x' --创建一个新的文件，并以写模式打开文件，如果文件存在则会产生FileExistsError错误，可以保护以存在文件。
't' --用文本文件模式打开(默认)
'+' --为更新内容打开文件 (r+w:可读可写)

注:缺省模式'rt'
'w+b' --实现二进制随机读写
'r+' --以文本模式打开文件，打开时不清空内容，可以对文件进行写操作

****************** bytes类型************************
以字节为单位存储数据，每个字节的值0-255(0-2**8-1)(包含0和255)
bytes常量的表示方式
b'' --空字节串
b'abcd' -- 有四个字节的字符串
b'\x41\x42' --有两个字节的字符串 \x41 -- A, \x42 --B

bytes运算
+ += *  *=
< <= > >= !=
in / not in
b'1' +b'aa' = b'1aa'

创建字节串(bytes)的函数
bytes() --创建空的字节串
bytes(整数) --创建多个\0 字节串 bytes(10) 创建10个\0字节串
bytes(可迭代对象)
bytes(字符串,encoding='utf-8')

bytes(range(65,65+26)) #生成26个英文大写字母
bytes('abc',encoding='utf-8') #转换字节

字节串可以看做是序列，字节串是不可变的，并且可以迭代
b= bytes('abc',encoding='utf-8')
for x in b: print(x)
汉字字符占三个字节
bytes('节',encoding='utf-8')  #b'\xe8\x8a\x82'

bytes 和str 转换
str --> bytes
  str.encode(encoding='utf-8')
	例如: b='节'.encode('utf-8')

bytes -->str
  bytes.decode(encoding='utf-8')
	例如:b'\xe4\xb8\xad'.decode('utf-8')


二进制文件的读写:
 二进制文件：
   文件中以字节为单位存储，不以换行符为单位分隔内容的文件

linux中 >>xxd mytest.txt  #可以查看文件字符编码

bytearray 类型
bytes类型为不可变类型
bytearray类型为可变的数据类型

bytearray的方法
b.clear() 清空
b.append(n) 追加一个字节(n为0-255的整数)
b.remove(value) 删除

**************标准输入输出文件*************************
sys.stdin
sys.stdout
sys.stderr

sys.stdout.write('hello')
print()函数也是调用sys.stdout.write


***********汉字编码***************
GB2312-80编码， 在1980年发布
用两个字节进行编码，编码范围A1A1-FEFE,包含汉字6763个和682个其他字符

GBK编码，在1995年发布,两个字节编码(8140-FEFE)(剔除xx7F) 收录21003个文字
第一个字节:81-FE
第二个字节:40-7E,80-FE

GB18030-2005编码，在2005年发布，收录了27533个汉字，用两个字节或四个字节表示汉字


GB18030,GBK,GB2312都是我国自定编码格式，会和其他国家编码返回重复
Unicode编码为国际化编码，重新定义所有国家的编码范围，避免了编码混乱问题
unicode-16(两字节)
unicode-32(四字节)(0x0000-0xFFFF)

unicode <--> utf-8 (unicode转化码)

utf-8(8-bit unicode trasformation format)
utf-8表示汉字为3字节 0x0800-0xFFFF
assic-II 为1字节编码 0-255


************环境管理器**************
类里有__enter__ 和 __exit__方法的类被称为环境管理器
能够用with语句进行管理的对象必须是环境管理器
__enter__将在进入with语句时被调用并返回,由as变量管理对象
__exit__将在离开with时被调用，且可以用参数来判断在离开with语句时是否发生有异常，并作出相应的处理

例子见cooker.py
 def __enter__(self):
        self.open_gas()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close_gas()
        if(exc_type is None):
            print("existed")
        else:
            print("error occured,",exc_val)









python中时间日期格式化符号：

%y 两位数的年份表示（00-99）

%Y 四位数的年份表示（000-9999）

%m 月份（01-12）

%d 月内中的一天（0-31）

%H 24小时制小时数（0-23）

%I 12小时制小时数（01-12）

%M 分钟数（00=59）

%S 秒（00-59）

 

%a 本地简化星期名称

%A 本地完整星期名称

%b 本地简化的月份名称

%B 本地完整的月份名称

%c 本地相应的日期表示和时间表示

%j 年内的一天（001-366）

%p 本地A.M.或P.M.的等价符

%U 一年中的星期数（00-53）星期天为星期的开始

%w 星期（0-6），星期天为星期的开始

%W 一年中的星期数（00-53）星期一为星期的开始

%x 本地相应的日期表示

%X 本地相应的时间表示

%Z 当前时区的名称

%% %号本身











